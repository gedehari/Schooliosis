// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum JenisKelamin {
  Laki
  Perempuan
}

enum Agama {
  Islam
  Kristen
  Katolik
  Hindu
  Budha
  Konghucu
}

enum IdentityType {
  Siswa
  Guru
  Admin
}

enum JenisJadwal {
  Upacara
  Pembelajaran
  Istirahat
}

enum StatusAbsen {
  Hadir
  Izin
  Sakit
  Alpha
}

enum JenisNilai {
  Tugas
  Kuis
  UTS
  UAS
}

model Config {
  key   String @id @db.VarChar(64)
  value String @db.Text
}

model Siswa {
  nis           Int          @id
  nama          String       @db.VarChar(255)
  tempatLahir   String       @db.VarChar(32)
  tanggalLahir  DateTime     @db.Date
  jenisKelamin  JenisKelamin
  agama         Agama
  alamat        String
  namaAyah      String       @db.VarChar(255)
  pekerjaanAyah String?      @db.VarChar(32)
  namaIbu       String       @db.VarChar(255)
  pekerjaanIbu  String?      @db.VarChar(32)
  kelas         Kelas?       @relation(fields: [kelasId], references: [id])
  kelasId       Int?
  user          User?
  absen         Absen[]
  nilai         Nilai[]
}

model Guru {
  nik             Int           @id
  nama            String        @db.VarChar(255)
  tempatLahir     String        @db.VarChar(32)
  tanggalLahir    DateTime      @db.Date
  jenisKelamin    JenisKelamin
  agama           Agama
  alamat          String
  mataPelajaran   MataPelajaran @relation(fields: [mataPelajaranId], references: [id])
  mataPelajaranId Int
  kelas           Kelas?        @relation(fields: [kelasId], references: [id])
  kelasId         Int?          @unique
  user            User?
  jadwal          Jadwal[]
}

model User {
  id           Int          @id @default(autoincrement())
  identityType IdentityType
  siswa        Siswa?       @relation(fields: [siswaNis], references: [nis])
  siswaNis     Int?         @unique
  guru         Guru?        @relation(fields: [guruNik], references: [nik])
  guruNik      Int?         @unique
  email        String       @unique // TODO: make email unique, add the relevant validators too...
  passwordHash String       @db.VarChar(255)

  @@index([email])
}

model Kelas {
  id      Int      @id @default(autoincrement())
  tingkat Int      @db.SmallInt
  huruf   String   @db.Char(1)
  siswa   Siswa[]
  jadwal  Jadwal[]
  guru    Guru?
}

model MataPelajaran {
  id            Int      @id @default(autoincrement())
  mataPelajaran String   @db.VarChar(64)
  singkatan     String   @db.VarChar(16)
  kkm           Float
  jadwal        Jadwal[]
  nilai         Nilai[]
  guru          Guru[]
}

model JamPelajaran {
  id      Int      @id @default(autoincrement())
  mulai   Int
  selesai Int
  jadwal  Jadwal[]
}

model Jadwal {
  id              Int            @id @default(autoincrement())
  hari            Int
  jenisJadwal     JenisJadwal
  mataPelajaran   MataPelajaran? @relation(fields: [mataPelajaranId], references: [id])
  mataPelajaranId Int?
  jamPelajaran    JamPelajaran   @relation(fields: [jamPelajaranId], references: [id])
  jamPelajaranId  Int
  kelas           Kelas          @relation(fields: [kelasId], references: [id])
  kelasId         Int
  guru            Guru?          @relation(fields: [guruNik], references: [nik])
  guruNik         Int?
}

model Absen {
  id          Int         @id @default(autoincrement())
  siswa       Siswa       @relation(fields: [siswaNis], references: [nis])
  siswaNis    Int
  statusAbsen StatusAbsen
  tanggal     DateTime    @unique
}

model Nilai {
  siswa           Siswa         @relation(fields: [siswaNis], references: [nis])
  siswaNis        Int
  jenisNilai      JenisNilai
  mataPelajaran   MataPelajaran @relation(fields: [mataPelajaranId], references: [id])
  mataPelajaranId Int
  nilai           Int

  @@id([siswaNis, jenisNilai, mataPelajaranId])
}
